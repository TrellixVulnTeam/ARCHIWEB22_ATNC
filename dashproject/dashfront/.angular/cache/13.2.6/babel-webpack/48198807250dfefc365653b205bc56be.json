{"ast":null,"code":"import * as $ from \"jquery\";\nimport { Track } from '../../models/Track';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/api.service\";\nexport let RechercheComponent = /*#__PURE__*/(() => {\n  class RechercheComponent {\n    constructor(apiService) {\n      this.apiService = apiService;\n      this.recherche = \"\";\n      this.isConnected = false;\n      this.sParam = \"\";\n      this.Musiques = [];\n      this.urlPlayer = \"https://open.spotify.com/embed/track/63Ip2RzAZTzdKNxAhFPNxh\";\n      this.selectedType = \"titre\"; //Type de recherche sélectionné\n\n      this.searchbarPlaceHolderText = \"un titre\";\n    }\n\n    ngOnInit() {}\n    /*\n      getToken() méthode pour récupérer un token d'accès\n    */\n\n\n    getToken() {\n      var subject = new Subject();\n      this.apiService.getNewToken().subscribe(tok => {\n        console.log(\"getToken() : token obtenu -> \" + tok.token);\n        subject.next(tok.token);\n      });\n      return subject.asObservable();\n    }\n    /*\n      Fonction appellée lors du clic sur le bouton recherche\n      Utilise le service API pour effectuer la bonne requête selon le choix renseigné\n      Rempli this.Musiques avec le résultat de la requête API\n      param type_recherche : Nombre entre 0, 1 ou 2 correspondant au choix du radio button\n    */\n\n\n    clickRechercher(value) {\n      this.getToken().subscribe(token => {\n        //Recherche en fonction du critère selectionné\n        switch (this.selectedType) {\n          //Regroupement des données par titre\n          case \"titre\":\n            {\n              let tracks = []; // Make Spotify API call\n              // Note: We are using the track API endpoint.\n\n              let search_query = encodeURI(value);\n              console.log(\"Recherche de \" + search_query + \" type sélectiooné : \" + this.selectedType + \" avec token \" + token);\n              $.ajax({\n                url: `https://api.spotify.com/v1/search?q=${search_query}&type=track`,\n                type: 'GET',\n                headers: {\n                  'Authorization': 'Bearer ' + token\n                },\n                success: function (data) {\n                  // Load our songs from Spotify into our page\n                  let num_of_tracks = data.tracks.items.length;\n                  let count = 0; // Max number of songs is 12\n\n                  const max_songs = 12;\n\n                  while (count < max_songs && count < num_of_tracks) {\n                    // Extract the id of the FIRST song from the data object\n                    let id = data.tracks.items[count].id;\n                    let track_name = data.tracks.items[count].name;\n                    let track_number = data.tracks.items[count].track_number;\n                    let album_name = data.tracks.items[count].album.name;\n                    let artist_name = data.tracks.items[count].artists[0].name;\n                    console.log(\"id=\" + id + \"artist : \" + artist_name + \" name:\" + track_name, \" tracknumb :\" + track_number + \" album : \" + album_name); // Constructing two different iframes to embed the song\n                    //let src_str = `https://open.spotify.com/embed/track/${id}`;\n                    //let iframe = `<div class='song'><iframe src=${src_str} frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe></div>`;\n                    //let parent_div = $('#song_'+ count);\n                    //parent_div.html(iframe);\n                    //Ajout d'une track dans le tableau\n\n                    tracks[count] = new Track(track_name, artist_name, album_name, id);\n                    count++;\n                  } //Envoi des tracks au composant résultat recherche\n\n                }\n              }); // End of Spotify ajax call\n\n              this.apiService.envoyerRecherche(tracks);\n            }\n            break;\n          //Regroupement des données par artiste\n\n          case \"artiste\":\n            {\n              let tracks = []; // Make Spotify API call\n              // Note: We are using the track API endpoint.\n\n              let search_query = encodeURI(value);\n              console.log(\"Recherche de \" + search_query + \" type sélectiooné : \" + this.selectedType + \" avec token \" + token);\n              $.ajax({\n                url: `https://api.spotify.com/v1/search?q=${search_query}&type=artist`,\n                type: 'GET',\n                headers: {\n                  'Authorization': 'Bearer ' + token\n                },\n                success: function (data) {\n                  // Load our songs from Spotify into our page\n                  let artist_id = data.artists.items[0].id;\n                  let artist_name = data.artists.items[0].name;\n                  console.log(\"name : \" + artist_name + \"id: \" + artist_id);\n                  let id_artiste = encodeURI(artist_id);\n                  console.log(\"Recherche de \" + id_artiste + \" avec token \" + token); //APPEL DE GET ARTIST's TOP TRACK request\n\n                  $.ajax({\n                    url: `https://api.spotify.com/v1/artists/${id_artiste}/top-tracks?market=FR`,\n                    type: 'GET',\n                    headers: {\n                      'Authorization': 'Bearer ' + token\n                    },\n                    success: function (data) {\n                      // Load our songs from Spotify into our page\n                      let num_of_tracks = data.tracks.length;\n                      console.log(\"Number of tracks : \" + num_of_tracks);\n                      let count = 0; // Max number of songs is 12\n\n                      const max_songs = 20;\n\n                      while (count < max_songs && count < num_of_tracks) {\n                        // Extract the id of the FIRST song from the data object\n                        let id = data.tracks[count].id;\n                        let track_name = data.tracks[count].name;\n                        let album_name = data.tracks[count].album.name;\n                        console.log(\"id=\" + id + \"artist : \" + artist_name + \" name:\" + track_name + \" album : \" + album_name);\n                        tracks[count] = new Track(track_name, artist_name, album_name, id);\n                        count++;\n                      }\n                    }\n                  }); // End of Spotify ajax call\n                }\n              }); // End of Spotify ajax call\n\n              this.apiService.envoyerRecherche(tracks);\n            }\n            break;\n          //Regroupement des données par album\n\n          case \"album\":\n            {\n              let tracks = []; // Make Spotify API call\n              // Note: We are using the track API endpoint.\n\n              let search_query = encodeURI(value);\n              console.log(\"Recherche de \" + search_query + \" type sélectiooné : \" + this.selectedType + \" avec token \" + token);\n              $.ajax({\n                url: `https://api.spotify.com/v1/search?q=${search_query}&type=album`,\n                type: 'GET',\n                headers: {\n                  'Authorization': 'Bearer ' + token\n                },\n                success: function (data) {\n                  // Load our songs from Spotify into our page\n                  let num_of_tracks = data.albums.items[0].total_tracks;\n                  let album_id = data.albums.items[0].id;\n                  let album_name = data.albums.items[0].name;\n                  console.log(\"name : \" + album_name + \"Number of tracks : \" + num_of_tracks + \"id: \" + album_id);\n                  let id_album = encodeURI(album_id);\n                  console.log(\"Recherche de \" + id_album + \" avec token \" + token); //APPEL DE GET ALBUM TRACK's REQUEST\n\n                  $.ajax({\n                    url: `https://api.spotify.com/v1/albums/${id_album}/tracks`,\n                    type: 'GET',\n                    headers: {\n                      'Authorization': 'Bearer ' + token\n                    },\n                    success: function (data) {\n                      // Load our songs from Spotify into our page\n                      let num_of_tracks = data.items.length;\n                      console.log(\"Number of tracks : \" + num_of_tracks);\n                      let count = 0; // Max number of songs is 12\n\n                      const max_songs = 20;\n\n                      while (count < max_songs && count < num_of_tracks) {\n                        // Extract the id of the FIRST song from the data object\n                        let id = data.items[count].id;\n                        let track_name = data.items[count].name;\n                        let track_number = data.items[count].track_number; //let album_name = \"data.items[count].album.name\";\n\n                        let artist_name = data.items[count].artists[0].name;\n                        console.log(\"id=\" + id + \"artist : \" + artist_name + \" name:\" + track_name, \" tracknumb :\" + track_number + \" album : \" + album_name);\n                        tracks[count] = new Track(track_name, artist_name, album_name, id);\n                        count++;\n                      }\n                    }\n                  }); // End of Spotify ajax call\n                }\n              }); // End of Spotify ajax call\n\n              this.apiService.envoyerRecherche(tracks);\n            }\n            break;\n        }\n      });\n    } //Gére le changement d'état des radio button + met à jour le contenu de la searchbar\n\n\n    radioChangedHandler(event) {\n      this.selectedType = event.target.value;\n      this.searchbarPlaceHolderText = \"un \" + this.selectedType;\n    }\n\n  }\n\n  RechercheComponent.ɵfac = function RechercheComponent_Factory(t) {\n    return new (t || RechercheComponent)(i0.ɵɵdirectiveInject(i1.ApiService));\n  };\n\n  RechercheComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RechercheComponent,\n    selectors: [[\"app-recherche\"]],\n    hostBindings: function RechercheComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"clickRechercher\", function RechercheComponent_clickRechercher_HostBindingHandler() {\n          return ctx.clickRechercher();\n        });\n      }\n    },\n    decls: 23,\n    vars: 1,\n    consts: [[1, \"jumbotron\", \"text-center\"], [1, \"container\"], [1, \"jumbotron-heading\"], [\"id\", \"barre_recherche\", \"type\", \"text\", 1, \"searchbar\", 3, \"placeholder\"], [\"searchbar\", \"\"], [1, \"choix-recherche\"], [\"type\", \"radio\", \"id\", \"titre\", \"name\", \"typesearch\", \"value\", \"titre\", \"checked\", \"\", 3, \"change\"], [\"for\", \"titre\"], [\"type\", \"radio\", \"id\", \"artiste\", \"name\", \"typesearch\", \"value\", \"artiste\", 3, \"change\"], [\"for\", \"artiste\"], [\"type\", \"radio\", \"id\", \"album\", \"name\", \"typesearch\", \"value\", \"album\", 3, \"change\"], [\"for\", \"album\"], [1, \"btn\", \"btn-primary\", \"my-2\", 3, \"click\"]],\n    template: function RechercheComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Viva Musica Search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 3, 4);\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"ul\");\n        i0.ɵɵelementStart(8, \"li\");\n        i0.ɵɵelementStart(9, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function RechercheComponent_Template_input_change_9_listener($event) {\n          return ctx.radioChangedHandler($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Titre\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"li\");\n        i0.ɵɵelementStart(13, \"input\", 8);\n        i0.ɵɵlistener(\"change\", function RechercheComponent_Template_input_change_13_listener($event) {\n          return ctx.radioChangedHandler($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"label\", 9);\n        i0.ɵɵtext(15, \"Artiste\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"li\");\n        i0.ɵɵelementStart(17, \"input\", 10);\n        i0.ɵɵlistener(\"change\", function RechercheComponent_Template_input_change_17_listener($event) {\n          return ctx.radioChangedHandler($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"label\", 11);\n        i0.ɵɵtext(19, \"Album\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵelementStart(21, \"a\", 12);\n        i0.ɵɵlistener(\"click\", function RechercheComponent_Template_a_click_21_listener() {\n          i0.ɵɵrestoreView(_r1);\n\n          const _r0 = i0.ɵɵreference(5);\n\n          return ctx.clickRechercher(_r0.value);\n        });\n        i0.ɵɵtext(22, \"Rechercher\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Rechercher \", ctx.searchbarPlaceHolderText, \"\");\n      }\n    },\n    styles: [\".choix-recherche[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .choix-recherche[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding:0;margin:0;list-style-type:none}.choix-recherche[_ngcontent-%COMP%] > ul[_ngcontent-%COMP%]{display:block;margin:auto;text-align:center}.choix-recherche[_ngcontent-%COMP%] > ul[_ngcontent-%COMP%] > li[_ngcontent-%COMP%]{margin-left:10px;margin-right:10px;display:inline-block;text-align:left}.choix-recherche[_ngcontent-%COMP%] > ul[_ngcontent-%COMP%] > li[_ngcontent-%COMP%] > label[_ngcontent-%COMP%]{padding:5px}.searchbar[_ngcontent-%COMP%]{width:400px}\"]\n  });\n  return RechercheComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}